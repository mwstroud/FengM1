//nrn_load_dll("./modfiles/x86_64/.libs/libnrnmech.so")
nrn_load_dll("../modfiles_withshortterm/nrnmech.dll")
load_file("nrngui.hoc")
//cvode_active(1)
load_file("stdgui.hoc")
load_file("../MC_CP_celltemplate.hoc")
load_file("../LAcells_template_LFP_segconsider_all_Iinject_line_oritation.hoc")
load_file("../interneuron_template_gj_LFP_Iinject_line_oritation.hoc") // Change the template file according to cell-type needed
load_file("../SOM.hoc") // Change the template file according to cell-type needed


//load_file("Main.hoc")
//load_file("BgGen.hoc")
//load_file("function_ToneGen.hoc")

///// pyramidal graphs scale ////
xmin_Pyr = 0
xmax_Pyr = 2000
ymin_Pyr = -80
ymax_Pyr = 40

///// simulation control ////
secondorder = 2
dt = 0.01//0.05//0.2//0.01

steps_per_ms= 100//20
tstop = 1000//1000//80500	// (ms)
celsius = 31
v_init = -70

/////////////////////////
// Cells Specification //
/////////////////////////


proc init() {
        finitialize(v_init)
        //fcurrent()
	//vrec = fieldrec()
}

objref cell_3
cell_3 = new SOM_Cell(0.5,0.5,0.5,1*100,0*1000,0*1000,1,0,0)//InterneuronCell(0,0,0,50,0,0)MC_CP
cell_3.drv.amp=0.0

//objref fluc
//cell_3.soma fluc = new Gfluct2(0.5)
//fluc.std_e = 0.012//0.012		// 4 times larger
//fluc.std_i = 0.0264//0.0264

//fluc.g_e0 = 0.009//0.0121
//fluc.g_i0 = 0.09//0.0573

//load_file("interpxyz.hoc")	// only interpolates sections that have extracellular
//grindaway()
//load_file("setpointers.hoc")	// automatically calls grindaway() in interpxyz.hoc

//load_file("field.hoc")		// computes extracellularly recorded potential vrec
//load_file("calcrxc.hoc")	// computes transfer r between segments and recording electrodes

/////////////////////
// Instrumentation //
/////////////////////
///// pyramidal current clamp ////
delay_Pyr = 100		//(ms)
duration_Pyr = 400//(ms)
amplitude_Pyr = 0//400	//(pA)


///// current clamp ////
objref  ccl, cclA, cclB, cclC, cclI,fluc

cell_3.soma cclA = new currentclamp(0.5)
cclA.del = delay_Pyr		// (ms)
cclA.dur = duration_Pyr		// (ms)
cclA.amp = amplitude_Pyr*1e-3	// (nA)

////for p cell
///// add exc noise ////
/*objref noiseRandObj
noiseRandObj=new Random()
    noiseRandObj.Random123(1)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj.normal(0,1)
cell_3.soma fluc = new Gfluct2_exc(0.5)	//Gfluct2_original
    //fluc.m = 0      //# [nA]
    //fluc.s = 1      //# [nA]
    //fluc.tau = 1    //# [ms]

//cell_3.soma fluc = new Gfluct2(0.5) // Fluctuating conductance

fluc.std_e = 0.012//0.012		// 4 times larger
fluc.std_i = 0//0.0264

fluc.g_e0 = 0.009//0.0121 for inter  0.009for pyr
fluc.g_i0 = 0//0.0573 for inter
fluc.setRandObj(noiseRandObj)
//fluc.new_seed(1)

//// add inh noise/////

objref noiseRandObj1,fluc1
noiseRandObj1=new Random()
    noiseRandObj1.Random123(1+1000)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj1.normal(0,1)
cell_3.soma fluc1 = new Gfluct2_inh(0.5)	//Gfluct2_original
    //fluc.m = 0      //# [nA]
    //fluc.s = 1      //# [nA]
    //fluc.tau = 1    //# [ms]

//cell_3.soma fluc = new Gfluct2(0.5) // Fluctuating conductance

fluc1.std_e = 0//0.012		// 4 times larger
fluc1.std_i = 0.0264//0.0264

fluc1.g_e0 = 0//0.0121 for inter  0.009for pyr
fluc1.g_i0 = 0.09//0.0573 for inter 0.09for pyr
fluc1.setRandObj(noiseRandObj1)
*/


////for I cell
///// add exc noise ////
objref noiseRandObj
noiseRandObj=new Random()
    noiseRandObj.Random123(1)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj.normal(0,1)
cell_3.soma fluc = new Gfluct2_exc(0.5)	//Gfluct2_original
    //fluc.m = 0      //# [nA]
    //fluc.s = 1      //# [nA]
    //fluc.tau = 1    //# [ms]

//cell_3.soma fluc = new Gfluct2(0.5) // Fluctuating conductance



fluc.g_e0 = 0.000121//0.005//0.0121 for inter  0.015for pyr
//fluc.g_i0 = 0.09//0.0573 for inter

fluc.std_e = 0.000012//0.012		// 4 times larger
//fluc.std_i = 0.02//0.0264

fluc.setRandObj(noiseRandObj)
//fluc.new_seed(1)

//// add inh noise/////

objref noiseRandObj1,fluc1
noiseRandObj1=new Random()
    noiseRandObj1.Random123(1+1000)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj1.normal(0,1)
cell_3.soma fluc1 = new Gfluct2_inh(0.5)	//Gfluct2_original
    //fluc.m = 0      //# [nA]
    //fluc.s = 1      //# [nA]
    //fluc.tau = 1    //# [ms]

//cell_3.soma fluc = new Gfluct2(0.5) // Fluctuating conductance



//fluc1.g_e0 = 0.00//0.0121 for inter  0.009for pyr
fluc1.g_i0 = 0.00573//0.0573 for inter 0.09for pyr

//fluc1.std_e = 0.000//0.012		// 4 times larger
fluc1.std_i = 0.00264//0.02for pyr

fluc1.setRandObj(noiseRandObj1)


////by Bggen/////
/*
load_file("BgGen.hoc")

objref bggen,bg2LAPsyn,bg2LAPcon
bggen = new BgGen(3,0,tstop,30,dt)
cell_3.dend bg2LAPsyn = new bg2pyr(0.5)
	bg2LAPsyn.initW = 7.0//6.3
	bg2LAPcon = new NetCon(bggen.intfire1,bg2LAPsyn,1,1,1)
   
*/



objref myvrec,my_ge1,my_gi1
myvrec= new Vector()
my_ge1= new Vector()
my_gi1= new Vector()
myvrec.record(&LFP_xtra,1)
my_ge1.record(&fluc.g_e1)
my_gi1.record(&fluc1.g_i1)

/*access cell_3.soma
nseg_soma = 1
R_S = ri(1/(nseg_soma*2))
R_S_2 = ri(1)
area_soma=area(0.5)
for (x) print x, area(x), ri(x)
access cell_3.dend
nseg_api = 1
R_api = ri(1/(nseg_api*2))
area_dend=area(0.5)
for (x) print x, area(x), ri(x)
//access cell_3.p_dend
nseg_basal = 1
R_b = ri(1/(nseg_basal*2))
for (x) print x, area(x), ri(x)

*/
/////////////////////////////////////////////////////////////
/////////////////////   Synapse model   ////////////////////
/////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
SubVBoxNum = 4
objref MainHBoxObj,SubVBoxObj[SubVBoxNum]

proc MainBox() { local i
		MainHBoxObj = new HBox()
		for i=0,SubVBoxNum-1 SubVBoxObj[i] = new VBox()
		SubVBoxObj[0].intercept(1)
			newPlotVoltage1()
			newPlotVoltage2()
			newPlotVoltage3()
		SubVBoxObj[0].intercept(0)
		SubVBoxObj[1].intercept(1)			
			newPlotCurrent() 
			newPlotCurrent2()
		SubVBoxObj[1].intercept(0)
		SubVBoxObj[2].intercept(1)
			access cell_3.soma
			nrnsecmenu(.5,1)
			access cell_3.dend
			nrnsecmenu(.5,1)	
			//access cell_3.p_dend
			nrnsecmenu(.5,1)			
		SubVBoxObj[2].intercept(0)
		SubVBoxObj[3].intercept(1)
			nrncontrolmenu()
			xpanel(" ")
				xbutton("QUIT","quit()")
			xpanel(0)
			nrnpointmenu(cclA)
			nrnpointmenu(fluc)
			nrnpointmenu(fluc1)
		SubVBoxObj[3].intercept(0)
		MainHBoxObj.intercept(1)
			for i=0,SubVBoxNum-1 SubVBoxObj[i].map()
		MainHBoxObj.intercept(0)
		MainHBoxObj.map("Re-Tune",10,25,800,600)
}

strdef tstr,tstr1

proc newPlotVoltage1() {
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	graphItem.addexpr("cell_3.soma.v(.5)")
	graphItem.label(.08,.925,"mV")
}
proc newPlotVoltage2() {
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	//graphItem.addexpr("cell_3.dend.v(.5)")
	graphItem.addexpr("LFP_xtra")
	//graphItem.addexpr("cell_3.soma.LFPtemp_xtra",2,1)
	//graphItem.addexpr("cell_3.dend.LFPtemp_xtra",3,1)
	//graphItem.addexpr("cell_3.p_dend.LFPtemp_xtra",4,1)
		//graphItem.addexpr("cell_3.p_dend.LFPtemp_xtra+cell_3.soma.LFPtemp_xtra+cell_3.dend.LFPtemp_xtra",5,2)


	graphItem.label(.08,.925,"uV")
}
proc newPlotVoltage3() {
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	graphItem.addexpr("LFP_xtra")


	
	graphItem.label(.08,.925,"uV")
}
proc newPlotCurrent() {
	newPlot(0,tstop,-0.2,0.2)
	graphItem.save_name("graphList[2].")
	graphList[1].append(graphItem)
	//graphItem.addexpr("(cell_3.dend.v(0.5)- cell_3.soma.v(0.5))/(R_S + R_api)",1,2)  // (0.016129))/(0.0382 + 12.16)",1,2)
	//graphItem.addexpr("cell_3.soma.ik",2,2)
	//graphItem.addexpr("0.4-cell_3.soma.i_membrane(0.5)*area_soma/100",2,4)
	//graphItem.addexpr("cell_3.dend.i_membrane(0.5)*area_dend/100",3,1)

	//tstr1 = units(&cell_3.soma.ina)
	//graphItem.label(.08,.925,tstr1)
}

proc newPlotCurrent2() {
	newPlot(0,tstop,-0.3,0.15)
	graphItem.save_name("graphList[2].")
	graphList[1].append(graphItem)
	//graphItem.addexpr("(cell_3.p_dend.v(0.5) - cell_3.soma.v(0.5))/(R_S_2 + R_b)",1,2)
	//graphItem.addexpr("cell_3.dend.ik",2,2)
	//tstr1 = units(&cell_3.dend.ina)
	//graphItem.label(.08,.925,tstr1)
}


MainBox()
run()

/*proc nrun() { local i
  if ($1>0) {
    for i=0,$1-1 run()
  }
}

nrun(2)
*/

/* strdef LFPfile,mygefile,mygifile
objref f_volt,myge,mygi




sprint(LFPfile,"LFP1112") 
f_volt = new File()
f_volt.wopen(LFPfile)

myvrec.printf(f_volt)
f_volt.close()  

sprint(mygefile,"iexc_new") 
myge = new File()
myge.wopen(mygefile)

my_ge1.printf(myge)
myge.close() 

sprint(mygifile,"iinh_new") 
mygi = new File()
mygi.wopen(mygifile)

my_gi1.printf(mygi)
mygi.close()  





strdef allimembrane_file
objref f_allimembrane

sprint(allimembrane_file,"allimembrane") 
f_allimembrane = new File()
f_allimembrane.wopen(allimembrane_file)

objref tempmatrix
tempmatrix = new Matrix()
tempmatrix.resize(tstop,160)
tempmatrix.zero()
for (i=0; i<cell_3.tlist.count(); i+=1) {
//print tlist.count
tempmatrix.setcol(i,cell_3.tlist.o(i))
//tlist.o(i).printf(f_allimembrane)
}
//f_allimembrane.close()  

tempmatrix.fprint(0,f_allimembrane, " %g") */
