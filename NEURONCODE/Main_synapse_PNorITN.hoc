//nrn_load_dll("./modfiles/x86_64/.libs/libnrnmech.so")
nrn_load_dll("../modfiles/nrnmech.dll")
load_file("nrngui.hoc")
//cvode_active(1)
load_file("stdgui.hoc")
load_file("../MC_CP_celltemplate.hoc")
load_file("../LAcells_template_LFP_segconsider_all_Iinject_line_oritation.hoc")
load_file("../interneuron_template_gj_LFP_Iinject_line_oritation.hoc") // Change the template file according to cell-type needed

///// pyramidal graphs scale ////
xmin_Pyr = 0
xmax_Pyr = 2000
ymin_Pyr = -80
ymax_Pyr = 40

///// simulation control ////
secondorder = 2
dt = 0.01//0.05//0.2//0.01

steps_per_ms= 100//20
tstop = 1000//80500	// (ms)
celsius = 31
v_init = -70
/////////////////////////
// Cells Specification //
/////////////////////////

proc init() {
        finitialize(v_init)
        //fcurrent()
	//vrec = fieldrec()
}
objref cell_3
cell_3 = new MC_CP(1.25,0.5,0.55,1.25*1000,0.55*1000,0.55*1000,0,0,1)  //Cell_C
cell_3.drv.amp=0.0


//load_file("setpointers.hoc")	// automatically calls grindaway() in interpxyz.hoc

//load_file("field.hoc")		// computes extracellularly recorded potential vrec
//load_file("calcrxc.hoc")	// computes transfer r between segments and recording electrodes
/////////////////////
// Instrumentation //
/////////////////////
///// pyramidal current clamp ////
delay_Pyr = 100		//(ms)
duration_Pyr = 600//(ms)
amplitude_Pyr = 0	//(pA)


///// current clamp ////
objref  ccl, cclA, cclB, cclC, cclI

cell_3.soma cclA = new currentclamp(0.5)
cell_3.drv.amp=0
cclA.del = delay_Pyr		// (ms)
cclA.dur = duration_Pyr		// (ms)
cclA.amp = amplitude_Pyr*1e-3	// (nA)

access cell_3.soma
nseg_soma = 1
R_S = ri(1/(nseg_soma*2))
R_S_2 = ri(1)
for (x) print x, area(x), ri(x)
access cell_3.dend
nseg_api = 1
R_api = ri(1/(nseg_api*2))
for (x) print x, area(x), ri(x)
//access cell_3.p_dend
nseg_basal = 1
R_b = ri(1/(nseg_basal*2))
for (x) print x, area(x), ri(x)

objref myvrec
myvrec= new Vector()
myvrec.record(&LFP_xtra,1)

objref syn, stim, nc, syn1, nc1, stim1, syn2, nc2

stim = new NetStim()
stim.start = 100
stim.number = 10e29//10e29//10//5
stim.interval = 1000/2//25//50//100
stim.noise=0



//cell_3.soma syn = new interV2pyrV_STFD(0.9) //tone2pyrV_nonmdalearning interV2pyrV_STFD
cell_3.dend syn = new bg2pyr(0.9) //tone2pyrV_nonmdalearning pyrD2pyrD_STFD

//cell_3.soma syn1 = new interV2pyrV(0.5)

//cell_3.dend syn2 = new tone2pyrV(0.16667)

//cell_3.dend nc = new NetCon(stim,syn,0,0,1)
 nc = new NetCon(stim,syn,0,1,1)
//cell_3.soma nc1 = new NetCon(stim,syn1,0,0,1)
//cell_3.dend nc1 = new NetCon(stim1,syn1,0,0,1)
//cell_3.dend nc2 = new NetCon(stim,syn2,0,0,1)

syn.initW = 8.5  //0.3 for exc, 1 for inh
//syn1.initW = 0.0001  //4//15
//syn2.initW = 0.0001   //1

/////////////////////////////////////////////////////////////
/////////////////////   Synapse model   ////////////////////
/////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
SubVBoxNum = 4
objref MainHBoxObj,SubVBoxObj[SubVBoxNum]

proc MainBox() { local i
		MainHBoxObj = new HBox()
		for i=0,SubVBoxNum-1 SubVBoxObj[i] = new VBox()
		SubVBoxObj[0].intercept(1)
			newPlotVoltage1()
			newPlotVoltage2()
			newPlotVoltage3()
		SubVBoxObj[0].intercept(0)
		SubVBoxObj[1].intercept(1)			
			newPlotCurrent() 
			newPlotCurrent2()
		SubVBoxObj[1].intercept(0)
		SubVBoxObj[2].intercept(1)
			access cell_3.soma
			nrnsecmenu(.5,1)
			nrnpointmenu(syn)	
			//nrnpointmenu(syn1)			
		SubVBoxObj[2].intercept(0)
		SubVBoxObj[3].intercept(1)
			nrncontrolmenu()
			xpanel(" ")
				xbutton("QUIT","quit()")
			xpanel(0)
			//nrnpointmenu(stim)
			//nrnpointmenu(stim1)
		SubVBoxObj[3].intercept(0)
		MainHBoxObj.intercept(1)
			for i=0,SubVBoxNum-1 SubVBoxObj[i].map()
		MainHBoxObj.intercept(0)
		MainHBoxObj.map("Re-Tune",10,25,800,600)
}

strdef tstr,tstr1

proc newPlotVoltage1() {
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	graphItem.addexpr("cell_3.soma.v(.5)")
	graphItem.label(.08,.925,"mV")
}
proc newPlotVoltage2() {
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	//graphItem.addexpr("cell_3.dend.v(.5)")
    //graphItem.addexpr("LFP_xtra")
    graphItem.addexpr("syn.inmda",3,1)
	graphItem.label(.08,.925,"mV")
}
proc newPlotVoltage3() {
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	//graphItem.addexpr("cell_3.p_dend.v(.5)")
	//graphItem.addexpr("syn.iampa")
    //graphItem.addexpr("syn.inmda")
    graphItem.addexpr("syn.iampa",2,1)
    //graphItem.addexpr("syn.inmda",3,1)
    //graphItem.addexpr("-syn.r_ampa")
	//graphItem.addexpr("cell_3.soma.LFP_temp_xtra+1",2,1)
	//graphItem.addexpr("cell_3.dend.LFP_temp_xtra+2",3,1)
	graphItem.label(.08,.925,"mV")
}
proc newPlotCurrent() {
	newPlot(0,tstop,-0.2,0.2)
	graphItem.save_name("graphList[2].")
	graphList[1].append(graphItem)
	//graphItem.addexpr("(cell_3.dend.v(0.5)- cell_3.soma.v(0.5))/(R_S + R_api)",1,2)  // (0.016129))/(0.0382 + 12.16)",1,2)
	//graphItem.addexpr("cell_3.soma.ik",2,2)
	//tstr1 = units(&cell_3.soma.ina)
	//graphItem.label(.08,.925,tstr1)
}

proc newPlotCurrent2() {
	newPlot(0,tstop,-0.3,0.15)
	graphItem.save_name("graphList[2].")
	graphList[1].append(graphItem)
	//graphItem.addexpr("(cell_3.p_dend.v(0.5) - cell_3.soma.v(0.5))/(R_S_2 + R_b)",1,2)
	//graphItem.addexpr("cell_3.dend.ik",2,2)
	//tstr1 = units(&cell_3.dend.ina)
	//graphItem.label(.08,.925,tstr1)
}

MainBox()
run()

/* strdef LFPfile
objref f_volt




sprint(LFPfile,"LFP_singlee") 
f_volt = new File()
f_volt.wopen(LFPfile)

myvrec.printf(f_volt)
f_volt.close()  


strdef allimembrane_file
objref f_allimembrane

sprint(allimembrane_file,"allimembrane") 
f_allimembrane = new File()
f_allimembrane.wopen(allimembrane_file)

objref tempmatrix
tempmatrix = new Matrix()
tempmatrix.resize(tstop/dt+1,16)
tempmatrix.zero()
for (i=0; i<cell_3.tlist.count(); i+=1) {
//print tlist.count
tempmatrix.setcol(i,cell_3.tlist.o(i))
//tlist.o(i).printf(f_allimembrane)
}
//f_allimembrane.close()  

//tempmatrix.fprint(0,f_allimembrane, " %g")
 */