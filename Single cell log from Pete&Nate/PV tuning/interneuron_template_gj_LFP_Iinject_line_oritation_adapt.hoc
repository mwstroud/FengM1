/////////////////////
// Model Templates //
/////////////////////

begintemplate InterneuronCell
	public soma, dend, connect2target, type,connect_gap,LFPtemp_xtra,drv
	create soma, dend

	public ncl, synlist
	objref ncl, synlist,gaps[200],drv
	strdef type

	objref tlist, area_vec
   public tlist, area_vec
   external tstop
	

	proc init() {	

	 tlist = new List()
    area_vec = new Vector()	
	
		synlist = new List()
		ncl = new List()
		type = "InterneuronCell"

		/////// topology ////////
		create soma, dend
		connect dend(0), soma(1)

		/////// geometry ////////
		soma {
			nseg=1
			L=15		// (micrometer)
			diam=15		// (micrometer)
	    	}

		dend {
			nseg=1
			L=150		// (micrometer)
			diam=10		// (micrometer)
		}

		/////// biophysics //////
		soma {
			cm = 1.5//1		    // (microF/cm2)
			Ra = 150*22.5	// (ohm-cm)
			Rm = 1/1e-6//5.7e-5//20000	    // (ohm-cm2)
			
			insert leakinter
			glbar_inter_leakinter = 1/Rm // (siemens/cm2)
			el_leakinter = -70	// (mV)

			insert nainter
			insert kdrinter
            insert sAHP gsAHPbar_sAHP = 0.0005

		drv = new IClamp(0.5)
		drv.del = 0
		drv.dur = tstop
		drv.amp = 0.2//0.2  //nA
	    	}

		dend {
			cm = 1.5//1		// (microF/cm2)
			Ra = 150	// (ohm-cm)
			Rm = 1/1e-6//5.7e-5//20000	// (ohm-cm2)
			
			insert leakinter
			glbar_inter_leakinter = 1/Rm // (siemens/cm2)
			el_leakinter = -70	// (mV)

			insert nainter
			insert kdrinter
		}
		soma {
			ena = 45		// (mV)
			gnabar_nainter = 0.035	// (siemens/cm2)

			ek = -80		// (mV)
			gkdrbar_kdrinter = 0.008 // (siemens/cm2)
			
			for i=0,199 { 
			gaps[i] = new gap(0.5) 
		    gaps[i].r = 1500//100000//100000 // Mohm resistance corresponding to 0.01 nS conductance
                    // that correspondes to 1nS for a cells of ~10000 â€˜my surface  
                    // order of magn. that was measured experimentally 
                    // ** 0.01 mS/cmy

		  
		    setpointer gaps[i].vgap,v(0.5)
			}
			n_gaps=0
            sigma=0.3
			insert xtra	
            for (x,0) { 
            x_xtra=$1*1000 y_xtra=$2*1000 z_xtra=$3*1000
				r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				if (r==0) r = diam(x)/2  //set limit
		        rho=1/sigma//35.4
                rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.01//0.01 //LFP unit is mV
            }
		}

		dend {
			ena = 45		// (mV)
			gnabar_nainter = 0.010	// (siemens/cm2)

			ek = -80		// (mV)
			gkdrbar_kdrinter = 0.003 // (siemens/cm2)
			
			/* insert ca_ion
			eca = 120
            sigma=0.3 */
			insert xtra	
            for (x,0) {
            x_xtra=$1*1000+(x*L+15/2+L/(2*nseg))*$7  y_xtra=$2*1000+(x*L+15/2+L/(2*nseg))*$8  z_xtra=$3*1000+(x*L+15/2+L/(2*nseg))*$9 //consider soma's dimension
          
				 //print x_xtra,y_xtra,z_xtra
                dist_comp_x = L/(nseg)*$7//(x_xtra - x_xtra) //* 1e-6
		        dist_comp_y = L/(nseg)*$8//(y_xtra - y_xtra) //* 1e-6
		        dist_comp_z = L/(nseg)*$9//(-L/nseg) //* 1e-6
                //print dist_comp_x
                sum_dist_comp = sqrt((dist_comp_x*dist_comp_x) + (dist_comp_y*dist_comp_y) + (dist_comp_z*dist_comp_z))
                
                if(sum_dist_comp<(diam/2)){ // setting radius limit
					sum_dist_comp = (diam/2) + 0.1
                     }
                long_dist_x = ($4- x_xtra)
		        long_dist_y = ($5- y_xtra)
		        long_dist_z = ($6- z_xtra)
                
                sum_HH = (long_dist_x * dist_comp_x) + (long_dist_y * dist_comp_y) + (long_dist_z * dist_comp_z)
                final_sum_HH = sum_HH / sum_dist_comp
                sum_temp1 = (long_dist_x * long_dist_x) + (long_dist_y * long_dist_y) + (long_dist_z * long_dist_z)
		        r_sq = sum_temp1 -(final_sum_HH * final_sum_HH)
			    
                if (r_sq<(diam/2)){   // setting radius limit
                r_sq = (diam/2) + 0.1

		          }
                //print r_sq
                
		        Length_vector = final_sum_HH + sum_dist_comp
                
                if ((final_sum_HH<0)&&(Length_vector<=0)){

			phi=log((sqrt((final_sum_HH*final_sum_HH) + r_sq) - final_sum_HH)/(sqrt((Length_vector*Length_vector)+r_sq)-Length_vector))

		}else if((final_sum_HH>0)&&(Length_vector>0)){
		
			phi=log((sqrt((Length_vector*Length_vector)+r_sq) + Length_vector)/(sqrt((final_sum_HH*final_sum_HH)+r_sq) + final_sum_HH))
			
		}else{

			phi=log(((sqrt((Length_vector*Length_vector)+r_sq)+Length_vector) * (sqrt((final_sum_HH*final_sum_HH)+r_sq)-final_sum_HH))/r_sq)
			 }
               
                //r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
				//r=100
				//if (r==0) r = diam(x)/2
		        //rho=1/0.03//35.4
                //rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
				
              rx_xtra(x) = 1/(4*PI*sum_dist_comp*sigma) * phi*0.01//LFP unit is mV
              }
		}
		forall {
		   insert extracellular
          
		   for (x, 0) {
		   if (ismembrane("xtra")) {
	//print x
     print rx_xtra(x),secname()
		setpointer im_xtra(x), i_membrane(x)
		setpointer ex_xtra(x), e_extracellular(x)
		//setpointer LFPtemp_xtra(x),LFP_xtra(x)
        //r = sqrt((x_xtra(x) - $4)^2 + (y_xtra(x) - $5)^2 + (z_xtra(x) - $6)^2)
		//print x,r
//        r = sqrt((x_xtra(x) - $1)^2 + (y_xtra(x) - $2)^2 + (z_xtra(x) - $3)^2)
        // 0.01 converts rho's cm to um and ohm to megohm
        // if electrode is exactly at a node, r will be 0
        // this would be meaningless since the location would be inside the cell
        // so force r to be at least as big as local radius
        //if (r==0) r = diam(x)/2
		//rho=1/0.03//35.4
        //rx_xtra(x) = (rho / 4 / PI)*(1/r)*0.001//0.01
        //print secname(),z_xtra(x),x
		
		//vrec += er_xtra(x)
		
	              }
	           }
			   
			   for (x,0){
			   		tlist.append(new Vector())
        //int_tlist.append(new Vector()) //now int_tlist is necessarily the same length as tlist
        area_vec.append(area(x)) // area_vec.x(i) is area of tlist.o(i)
		//print area(x)
        //tlist.o(tlist.count()-1).record(&i_membrane(x),1)
		tlist.o(tlist.count()-1).record(&er_xtra(x),1)
			   }
		    }
	}
	
	proc connect_gap() {
// $o1 arg is the other Cell
     n_gaps +=1
    setpointer gaps[n_gaps-1].vgap, $o1.soma.v(0.5)
}

obfunc connect2target() { localobj nc
	soma nc = new NetCon(&v(0.5), $o1)
	nc.threshold = 0
	if (numarg() == 2) ($o2 = nc)
	return nc
	}
endtemplate InterneuronCell
