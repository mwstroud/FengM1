load_file("SOM.hoc")

//simuation constants
SIMRUNTIME = 1500
DELAY = 400
INJTIME = 500
I_INJ = 0.3

tstop = SIMRUNTIME
v_init = -60

objectvar membrane_voltage, time
membrane_voltage = new Vector()
time = new Vector()

objectvar cell
cell = new SOM_Cell()

//record the cells membrane voltage.
membrane_voltage.record(&cell.soma.v(0.5))
time.record(&t)




objref current_vectors[8], g_cvt
g_cvt = new Graph()
for(i = 0; i < 8; i += 1) {
    current_vectors[i] = new Vector()
}

//Nat, Kdr, A, H , CaL, CaT, sAHP
current_vectors[0].record(&cell.dend[0].inat_ichan2OLM)
current_vectors[1].record(&cell.dend[0].ikf_ichan2OLM)
current_vectors[2].record(&cell.dend[0].ik_IAOLM)
current_vectors[3].record(&cell.dend[0].ih_IhOLM)
current_vectors[4].record(&cell.dend[0].ilca_lcaOLM)
current_vectors[5].record(&cell.dend[0].itca_catOLM)
current_vectors[6].record(&cell.dend[0].i_nap)
//current_vectors[6].record(&cell.dend[0].ik_sAHPOLM)


//Create a current clamp.
objectvar i_inj
cell.soma i_inj = new IClamp(0.5)
i_inj.del = DELAY
i_inj.dur = INJTIME
i_inj.amp = I_INJ

//run the simulation and plot the outcome
run()

//Membrane voltage vs. time
objectvar g_mvt
g_mvt = new Graph()

proc mgraph() {
    g_mvt.size(0,SIMRUNTIME, 30, -90)
    g_mvt.vector(membrane_voltage.size(), &time.x[0], &membrane_voltage.x[0])
    g_mvt.flush()
}



objref nc, nil, spvec
func runSim(){


    cell.soma nc = new NetCon(&v(0.5),nil)
    spvec = new Vector()
    nc.record(spvec)

    i_inj.amp=$1

    run()

    return (spvec.size() / (INJTIME)) * 1000
}




proc cgraph() {

    //Nat, Kdr, A, H , CaL, CaT, sAHP
    //Graph currents.
    g_cvt.color(1)
    g_cvt.label("Black: NaT")
    g_cvt.vector(current_vectors[0].size(), &time.x[0], &current_vectors[0].x[0])

    g_cvt.color(2)
    g_cvt.label("Red: Kdr")
    g_cvt.vector(current_vectors[1].size(), &time.x[0], &current_vectors[1].x[0])

    g_cvt.color(3)
    g_cvt.label("Blue: A")
    g_cvt.vector(current_vectors[2].size(), &time.x[0], &current_vectors[2].x[0])

    g_cvt.color(4)
    g_cvt.label("Green: H")
    g_cvt.vector(current_vectors[3].size(), &time.x[0], &current_vectors[3].x[0])

    g_cvt.color(5)
    g_cvt.label("Orange: CaL")
    g_cvt.vector(current_vectors[4].size(), &time.x[0], &current_vectors[4].x[0])

    g_cvt.color(6)
    g_cvt.label("Brown: CaT")
    g_cvt.vector(current_vectors[5].size(), &time.x[0], &current_vectors[5].x[0])

    g_cvt.color(7)
    g_cvt.label("Violet: NaP")
    g_cvt.vector(current_vectors[6].size(), &time.x[0], &current_vectors[6].x[0])

    g_cvt.flush()

    g_cvt.exec_menu("View = plot")
}


//mgraph()
//cgraph()


objectvar g_fi, target, reported, current_inj
g_fi = new Graph()
reported = new Vector(14)
current_inj = new Vector(14)

//minimum spiking threshold value is 44 pA for  SOM cells.
count = 0
for (i = 0.044; i <= 0.26 + 0.044; i += 0.02) {
    reported.x[count] = runSim(i)
    current_inj.x[count] = i
    count += 1
}

target = new Vector(14)
target.x[0] = 18
target.x[1] = 21
target.x[2] = 33
target.x[3] = 38
target.x[4] = 40
target.x[5] = 45
target.x[6] = 50
target.x[7] = 52
target.x[8] = 53
target.x[9] = 53
target.x[10] = 53
target.x[11] = 53
target.x[12] = 54
target.x[13] = 58


g_fi.color(4)
g_fi.vector(10, &current_inj.x[0],&target.x[0])

g_fi.color(1)
g_fi.vector(10, &current_inj.x[0],&reported.x[0])

g_fi.size(0,0.27,0,target.x[target.size() - 1] + 10)

g_fi.flush()

printf("Cell fi at %f nA injection: %f\n",I_INJ,runSim(I_INJ))