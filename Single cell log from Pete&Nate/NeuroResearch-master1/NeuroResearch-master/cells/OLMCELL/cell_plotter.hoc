load_file("OLM.hoc")

//simuation constants
SIMRUNTIME = 600
DELAY = 200
INJTIME = 200
I_INJ = 0.4

tstop = SIMRUNTIME
v_init = -75

objectvar membrane_voltage, time
membrane_voltage = new Vector()
time = new Vector()

objectvar cell
cell = new OLMCell()

//record the cells membrane voltage.
membrane_voltage.record(&cell.soma.v(0.5))
time.record(&t)

//First graph the membrane potential vs time plot.

//Create a current clamp.
objectvar i_inj
cell.soma i_inj = new IClamp(0.5)
i_inj.del = DELAY
i_inj.dur = INJTIME
i_inj.amp = I_INJ

//run the simulation and plot the outcome
run()

//Membrane voltage vs. time
objectvar g_mvt
g_mvt = new Graph()
g_mvt.size(0,SIMRUNTIME, 30, -90)
g_mvt.vector(membrane_voltage.size(), &time.x[0], &membrane_voltage.x[0])
g_mvt.flush()

objref nc, nil, spvec
func runSim(){


    cell.soma nc = new NetCon(&v(0.5),nil)
    spvec = new Vector()
    nc.record(spvec)

    i_inj.amp=$1

    run()

    return (spvec.size() / (INJTIME)) * 1000
}

printf("Cell fi at %f nA injection: %f\n",I_INJ,runSim(I_INJ))

objectvar g_fi, target, reported, current_inj
g_fi = new Graph()
reported = new Vector(10)
current_inj = new Vector(10)

count = 0
for (i = 0; i < 1.0; i += 0.1) {
    reported.x[count] = runSim(i)
    current_inj.x[count] = i
    count += 1
}

target = new Vector(10)
target.x[0] = 0
target.x[1] = 0
target.x[2] = 6
target.x[3] = 14
target.x[4] = 22
target.x[5] = 29
target.x[6] = 36
target.x[7] = 43
target.x[8] = 50
target.x[9] = 56

g_fi.color(4)
g_fi.vector(10, &current_inj.x[0],&target.x[0])

g_fi.color(1)
g_fi.vector(10, &current_inj.x[0],&reported.x[0])

g_fi.size(0,1.0,0,target.x[target.size() - 1] + 10)

g_fi.flush()